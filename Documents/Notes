Dump clang ast:
---------------
clang -Xclang -ast-dump [-fsyntax-only] 
clang-check <path> -ast-dump -ast-dump-filter <filter> [--]

Get the list of tokens:
-----------------------
clang-check <path> -ast-list [--]


Milestone 1
===========

1. Discuss the architecture of the protection mechanism to be implemented
-------------------------------------------------------------------------
Protect all virtual function callsites to make sure they only call function from
the correct hierarchy by putting all virtual tables aligned to a certain power
of two in memory and making a bit cast check and a comparaison to check that we
dereference the right virtual table. Given the hierarchy of class (with no
multiple inheritance) we can lay them in memory as nested lists (top-left right
traversal of the inheritance tree).


2. View clang AST generated for simple C++ programs with classes and virtual functions
--------------------------------------------------------------------------------------
clang-check Virtual.cpp -ast-dump --


3. Print C++ class hierarchy based on clang AST 
-----------------------------------------------
see llvm/tools/clang/tools/extra/hierarchy


4. Print all virtual function callsites in the program, along with the
information about static type of the object whose method is being called 
------------------------------------------------------------------------
see llvm/tools/clang/tools/extra/virtual-calls


5. Find out when and how virtual tables are generated by clang, print all
virtual tables during compilation
-------------------------------------------------------------------------


Milestone 2
===========

1. Decide which information about class hierarchy, virtual tables and virtual
calls is necessary in order to compute and enforce virtual tables layout and
insert checks as required for the protection mechanism. 
-----------------------------------------------------------------------------


2. Find out which of these information is already present in LLVM IR, and which
needs to be added. Discuss this findings in person. 
-------------------------------------------------------------------------------


3. Modify clang to preserve necessary information when it emits LLVM IR. 
------------------------------------------------------------------------


4. Make sure that the modified clang successfully runs on all SPEC2006
benchmarks and manually verify its correctness on a sample from the benchmarks.
-------------------------------------------------------------------------------
